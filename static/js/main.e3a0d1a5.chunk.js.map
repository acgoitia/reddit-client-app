{"version":3,"sources":["utils.js","components/postList/postListSlice.js","components/post/Post.js","components/postList/PostList.js","components/header/Header.js","components/sidebarList/sidebarListSlice.js","components/sidebarList/SidebarList.js","components/subreddit/subredditSlice.js","components/subreddit/Subreddit.js","components/commentList/commentListSlice.js","components/comment/Comment.js","components/commentList/CommentList.js","components/postwComments/PostwComments.js","components/scrollToTop/ScrollToTop.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["getId","post","data","id","getTitle","title","getAuthor","author","getSubreddit","subreddit_name_prefixed","getImageURL","url","search","getVideoURL","secure_media","reddit_video","fallback_url","getVideoHtml","oembed","html","getNumComments","num_comments","getScore","score","getDate","created_utc","getHtml","selftext_html","getLink","permalink","decodeEntities","element","document","createElement","str","replace","innerHTML","textContent","getElapsedTime","timeStamp","unixDateMs","timeDiffMs","Date","now","min","hrs","days","months","years","Math","floor","getSubscribers","number","getCommentData","commentArray","filter","comment","kind","map","content","body","replies","children","date","link","loadPosts","createAsyncThunk","thunkAPI","a","fetch","response","json","jsonArray","formattedPosts","subreddit","imageURL","videoURL","videoHtml","numComments","datePosted","htmlBody","options","name","initialState","posts","isLoading","hasError","reducers","addPost","state","action","push","payload","deletePost","resetPosts","selectPost","selectedPost","extraReducers","pending","fulfilled","rejected","postListSlice","createSlice","selectPosts","postList","actions","Post","props","className","formattedScore","formattedComments","timeElapsed","scoreK","round","commentsK","to","dangerouslySetInnerHTML","__html","src","alt","controls","autoPlay","muted","loop","type","PostList","dispatch","useDispatch","useSelector","match","endpoint","useEffect","path","Header","useState","setEndpoint","handleSubmit","onSubmit","placeholder","value","onChange","target","loadSubReddits","subRedditUrl","jsonData","subRedditArray","el","display_name_prefixed","description","description_html","subscribers","display_name","subReddits","resetSubReddits","sidebarListSlice","selectSubReddits","sidebarList","SidebarList","subReddit","loadSubReddit","public_description","members","online","active_user_count","icon","icon_img","banner","banner_img","color","banner_background_color","deleteSubreddit","subredditSlice","selectSubReddit","Subreddit","groupLink","params","postsLink","style","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","loadComments","postUrl","commentsArray","comments","resetComments","commentListSlice","selectComments","commentList","Comment","isVisible","isVisibleState","setIsVisibleState","handleClickEvent","tmp","prev","index","repliesArray","onClick","Object","assign","CommentList","postLink","isVisibleArray","isVisibleObj","PostwComments","renderedPost","ScrollToTop","pathname","useLocation","window","scrollTo","App","history","useHistory","setLink","e","preventDefault","defaultValue","exact","render","component","store","configureStore","reducer","postListReducer","commentListReducer","sidebarListReducer","subredditReducer","Boolean","location","hostname","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3a0d1a5.chunk.js","sourcesContent":["// Helper functions - from post List: \r\n\r\nexport function getId (post) {\r\n    return post.data.id;   // original return post.data.title;\r\n}\r\nexport function getTitle (post) {\r\n    return post.data.title;   // original return post.data.title;\r\n}\r\nexport function getAuthor (post) {\r\n    return post.data.author;\r\n}\r\nexport function getSubreddit (post) {\r\n    return post.data.subreddit_name_prefixed;\r\n}\r\nexport function getImageURL (post) {\r\n    if (post.data.url.search(/.jpg/) !== -1  || post.data.url.search(/.png/) !== -1 ){  // see if it links to image\r\n        return post.data.url;    \r\n    }\r\n    return '';\r\n}\r\nexport function getVideoURL (post) {\r\n    if (post.data.secure_media) {\r\n        if(post.data.secure_media.reddit_video){\r\n            return post.data.secure_media.reddit_video.fallback_url;\r\n        }\r\n    }\r\n    return '';\r\n}\r\nexport function getVideoHtml (post) {\r\n    if (post.data.secure_media) {\r\n        if(post.data.secure_media.oembed){\r\n            return post.data.secure_media.oembed.html;\r\n        }\r\n    }\r\n    return '';\r\n}\r\nexport function getNumComments (post) {\r\n    return post.data.num_comments;\r\n}\r\nexport function getScore (post) {\r\n    return post.data.score;\r\n}\r\nexport function getDate (post) {\r\n    return post.data.created_utc;\r\n}\r\nexport function getHtml (post) {\r\n    return post.data.selftext_html;\r\n}\r\nexport function getLink (post) {\r\n    return post.data.permalink;    \r\n}\r\n\r\n// HTML Entities decoder\r\n\r\nexport var decodeEntities = (function() {\r\n    // this prevents any overhead from creating the object each time\r\n    var element = document.createElement('div');\r\n  \r\n    function decodeHTMLEntities (str) {\r\n      if(str && typeof str === 'string') {\r\n        // strip script/html tags\r\n        str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\r\n        str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\r\n        element.innerHTML = str;\r\n        str = element.textContent;\r\n        element.textContent = '';\r\n      }\r\n  \r\n      return str;\r\n    }\r\n  \r\n    return decodeHTMLEntities;\r\n  })();\r\n\r\n\r\n// Date Posted helper function\r\n\r\n// time-stamp conversion to elapsed time\r\nexport function getElapsedTime (timeStamp) {\r\n    const unixDateMs = timeStamp * 1000;\r\n    const now = Date.now();\r\n    const timeDiffMs = now - unixDateMs;\r\n    const min = timeDiffMs / 1000 / 60;\r\n    const hrs = timeDiffMs / 1000 / 3600;\r\n    const days = hrs / 24;\r\n    const months = days / 30.44;\r\n    const years = days / 365.24;\r\n    \r\n    if (min < 60) {\r\n        return `${Math.floor(min)} minutes ago`;\r\n    }\r\n    if (hrs < 24) {\r\n        return `${Math.floor(hrs)} hours ago`;\r\n    } \r\n    if (days < 30.44) {\r\n        return `${Math.floor(days)} days ago`;\r\n    }\r\n    if (months < 12) {\r\n        return `${Math.floor(months)} months ago`;\r\n    }\r\n    return `${Math.floor(years)} years ago`;\r\n\r\n}\r\n\r\n// Helper function to convert subscriber units\r\nexport function getSubscribers (number) {\r\n     if (number < 1000) {\r\n        return `${number}`;\r\n     }\r\n     if (number < 1000000) {\r\n        return `${Math.floor(number/1000)}K`;\r\n     }\r\n    return `${Math.floor(number/100000)/10}M`;\r\n}\r\n\r\n// Helper to turn comment data into simpliefied object\r\nexport function getCommentData (commentArray) {\r\n    const commentArrayFiltered = commentArray.filter(comment => comment.kind !== \"more\")  // remove \"more\" array with info for next posts/comments\r\n    const filteredComments = commentArrayFiltered.map(comment => {\r\n            \r\n    const content = comment.data.body;\r\n    const author = comment.data.author;\r\n    var replies = '';\r\n    if (comment.data.replies){\r\n        replies = comment.data.replies.data.children;  \r\n    } \r\n    const date = comment.data.created_utc;\r\n    const link = comment.data.permalink;  // ending of link, starts with r/...\r\n    \r\n    const commentObj = {\r\n        content: content,\r\n        author: author,\r\n        replies: replies,\r\n        date: date,\r\n        link: link\r\n    }\r\n    \r\n        return commentObj;\r\n    })\r\n\r\n    return filteredComments;\r\n\r\n}\r\n\r\n// Helper to turn comment data into simpliefied object\r\n\r\nexport function getSubRedditData (array) {\r\n\r\n    return array.map((el) => {\r\n        \r\n        return  {\r\n            title: el.data.display_name_prefixed,\r\n            description: el.data.description_html,  // this or .description without html tags\r\n            id: el.data.id,\r\n            subscribers: el.data.subscribers,\r\n            display_name: el.data.display_name\r\n        }\r\n    })\r\n\r\n}\r\n\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getId, getTitle, getAuthor, getSubreddit, getImageURL, getVideoURL, getNumComments, getScore, getDate, getHtml, getVideoHtml, getLink } from '../../utils';\r\n\r\n// use createAsyncThunk to fetch reddit posts list asynchronously with action creator and reducer\r\n\r\nexport const loadPosts = createAsyncThunk('postList/loadPosts', async (url, thunkAPI) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const jsonArray = data.data.children;\r\n    \r\n    // Extracting relevant data elements from raw post data\r\n    const formattedPosts = jsonArray.map((data) => {\r\n        \r\n        //Extract relevant fields from JSON data\r\n        const id = getId(data);\r\n        const title = getTitle(data);\r\n        const author = getAuthor(data);\r\n        const subreddit = getSubreddit(data);\r\n        const imageURL = getImageURL(data);\r\n        const videoURL = getVideoURL(data);\r\n        const videoHtml = getVideoHtml(data);\r\n        const numComments = getNumComments(data);\r\n        const score = getScore(data);\r\n        const datePosted = getDate(data);\r\n        const htmlBody = getHtml(data);\r\n        const link = getLink(data);\r\n        \r\n        // Create post object\r\n        const post = {\r\n            id: id,\r\n            title: title,\r\n            author: author,\r\n            subreddit:subreddit,\r\n            imageURL: imageURL,\r\n            videoURL: videoURL,\r\n            videoHtml: videoHtml,\r\n            numComments: numComments,\r\n            score: score,\r\n            datePosted: datePosted,\r\n            htmlBody: htmlBody,\r\n            link: link\r\n        }\r\n        return post;\r\n    });\r\n\r\n    return formattedPosts;\r\n    \r\n});\r\n\r\n\r\n\r\n// create slice\r\n\r\nconst options = {\r\n    name: 'postList',\r\n    initialState: {\r\n        posts: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {\r\n        addPost: (state, action) => {\r\n            state.posts.push(action.payload);\r\n        },\r\n        deletePost: (state, action) => {\r\n            return state.posts.filter( post => post !== action.payload);\r\n        },\r\n        resetPosts: (state) => {\r\n            state.posts = []\r\n        },\r\n        selectPost: (state, action) => {\r\n            const selectedPost = state.posts.filter(post => post.id === action.payload)\r\n            state.posts = selectedPost;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadPosts.pending]: (state, action) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadPosts.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n            state.posts = action.payload;\r\n        },\r\n        [loadPosts.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n    }\r\n}\r\n\r\nconst postListSlice = createSlice(options);\r\n\r\n// Define selectors\r\n\r\nexport const selectPosts = (state) => state.postList.posts;  // return array of posts\r\n\r\n\r\n// export action creators and reducers\r\n\r\nexport const { addPost, deletePost, resetPosts, selectPost } = postListSlice.actions;\r\nexport default postListSlice.reducer;\r\n","import React from 'react';\r\nimport './post.css';\r\nimport { decodeEntities, getElapsedTime } from '../../utils';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Post (props) {\r\n    //const dispatch = useDispatch\r\n    const { posts } = props;\r\n\r\n    return (\r\n        <div className=\"Post-List-sub\">\r\n            {\r\n                posts.map(post => {\r\n                   \r\n                    // time-stamp conversion to elapsed time\r\n                    const timeElapsed = getElapsedTime(post.datePosted)\r\n                    \r\n                    // Reformating score and comment #s\r\n                    let formattedScore;\r\n                    let formattedComments;\r\n\r\n                    if ( post.score > 999) {\r\n                        const scoreK = Math.round(post.score / 100) / 10;\r\n                        formattedScore = `${scoreK}k`;\r\n                    } else {\r\n                        formattedScore = `${post.score}`;\r\n                    }\r\n\r\n                    if ( post.numComments > 999) {\r\n                        const commentsK = Math.round(post.numComments /100) / 10;\r\n                        formattedComments = `${commentsK}k comments`;\r\n                    } else {\r\n                        formattedComments = `${post.numComments} comments`;\r\n                    }\r\n                    // Getting HTML string for body\r\n                    const htmlBody = decodeEntities(post.htmlBody);\r\n                    const videoHtml = decodeEntities(post.videoHtml);\r\n                    \r\n\r\n                    return (\r\n                        <div className=\"Post\">\r\n                            <div className=\"post-header\">\r\n                                <Link to={`/${post.subreddit}`}>\r\n                                    <p className=\"subreddit\">{post.subreddit}</p>\r\n                                </Link>\r\n                                <p>{`Posted by u/${post.author}`}</p>\r\n                                <p>{timeElapsed}</p>\r\n                            </div>\r\n                            <div className=\"post-body\">\r\n                                <h1>{post.title}</h1>\r\n                                { post.htmlBody && <div dangerouslySetInnerHTML={{__html: htmlBody}}></div> }\r\n                                { post.imageURL && <img src={post.imageURL} alt=\"post\" /> }\r\n                                { post.videoURL && <video controls autoPlay muted loop ><source src={post.videoURL} type=\"video/mp4\" /></video> }\r\n                                { post.videoHtml && <div dangerouslySetInnerHTML={{__html: videoHtml}}></div> }\r\n                            </div>\r\n                            <div className=\"post-footer\">\r\n                                <div className=\"score\">\r\n                                    <i className=\"fas fa-arrow-up\"></i>\r\n                                    <p>{formattedScore}</p>\r\n                                    <i className=\"fas fa-arrow-down\"></i>\r\n                                </div>\r\n                                <Link to={`/${post.id}`} >\r\n                                    <div className=\"comments\" >\r\n                                        <i className=\"fas fa-comment-alt\"></i>\r\n                                        <p>{formattedComments}</p>\r\n                                    </div>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Post;\r\n\r\n//onClick={handleCommentClick} id={post.id}","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectPosts, resetPosts, loadPosts } from './postListSlice';\r\nimport Post from '../post/Post';\r\nimport './postList.css';\r\n\r\nfunction PostList (props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const { isLoading, hasError } = useSelector((state) => state.postList);\r\n    \r\n    \r\n    const { link, match, endpoint } = props;  \r\n\r\n    useEffect(() => {\r\n        dispatch(resetPosts());\r\n        dispatch(loadPosts(link));\r\n    }, [dispatch, link]);\r\n    \r\n    const posts = useSelector(selectPosts)\r\n\r\n    if (isLoading){\r\n        return (\r\n            <div className=\"Post-List\">\r\n                <h1 className=\"loading\">Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (hasError){\r\n        return (\r\n            <div className=\"Post-List\">\r\n                <h1 className=\"error\">Ooops!  Something went wrong and we couldn't fetch data from server.  Reload and try again.</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"Post-List\">\r\n            {match && ((match.path === \"/\") && <h2>Popular Posts</h2>)}\r\n            {match && ((match.path === `/search/${endpoint}`) && <h2>{`Search results for: ${endpoint}`}</h2>)}\r\n            <Post posts={posts} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default PostList;","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './header.css';\r\n\r\nfunction Header (props) {\r\n\r\n    // need to do events and event handlers to pass in search results over to fetch methods\r\n    const [endpoint, setEndpoint] = useState(\"\");\r\n    const { handleSubmit } = props;\r\n\r\n    // clear text field after submiting search\r\n    useEffect(()=>{\r\n        setEndpoint(\"\");\r\n    }, [handleSubmit])\r\n\r\n    const handleChange = ({target}) => {\r\n        setEndpoint(target.value)\r\n    };\r\n\r\n    return (\r\n        <header>\r\n            <Link to=\"/\">\r\n                <p>Home</p>\r\n            </Link>\r\n            <form onSubmit={handleSubmit} >\r\n                <input type=\"text\" placeholder=\"search...\"  value={endpoint} onChange={handleChange}/>\r\n            </form>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getSubRedditData } from '../../utils';\r\n\r\n\r\n// Async action creator\r\nexport const loadSubReddits = createAsyncThunk('sidebarList/loadSubReddits', async (subRedditUrl, thunkAPI) => {\r\n    const response = await fetch(subRedditUrl);\r\n    const jsonData = await response.json();\r\n    \r\n    const subRedditArray = jsonData.data.children; // array of subreddits objects\r\n    \r\n    return getSubRedditData(subRedditArray);\r\n    \r\n})\r\n\r\n\r\n// create slice\r\nconst options = {\r\n    name: 'sidebarList',\r\n    initialState: {\r\n        subReddits: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {\r\n        resetSubReddits: (state, action) => {\r\n            state.subReddits = [];\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadSubReddits.pending]: (state, action) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadSubReddits.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n            state.subReddits = action.payload;\r\n        },\r\n        [loadSubReddits.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError= true;\r\n        }\r\n    }\r\n};\r\n\r\nconst sidebarListSlice = createSlice(options);\r\n\r\n// Define selectors\r\nexport const selectSubReddits = (state) => state.sidebarList.subReddits;\r\n\r\n// Export actions \r\nexport const { resetSubReddits } = sidebarListSlice.actions;\r\nexport default sidebarListSlice.reducer;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { loadSubReddits, resetSubReddits, selectSubReddits } from './sidebarListSlice';\r\nimport { getSubscribers } from '../../utils';\r\nimport './sidebarList.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction SidebarList (props) {\r\n    const dispatch = useDispatch();\r\n    const { isLoading, hasError } = useSelector((state) => state.sidebarList);\r\n\r\n     // Load post comments\r\n     const subRedditsLink = 'https://www.reddit.com/subreddits/.json'; // currently test link\r\n\r\n     useEffect(() => {\r\n         dispatch(resetSubReddits());\r\n         dispatch(loadSubReddits(subRedditsLink));\r\n     }, [dispatch]);\r\n     \r\n     const subReddits = useSelector(selectSubReddits);\r\n\r\n\r\n     if (isLoading){\r\n         return (\r\n            <div className=\"Sidebar-List\">\r\n                <h2>Popular Subreddits</h2>\r\n                <h2 className=\"loading\">...</h2>\r\n            </div>\r\n         );\r\n     }\r\n \r\n     if (hasError){\r\n         return (\r\n            <div className=\"Sidebar-List\">\r\n                <h2>Popular Subreddits</h2>\r\n                <h2 className=\"error\">Ooops!  Something went wrong.  Reload and try again.</h2>\r\n            </div>\r\n         );\r\n     }\r\n \r\n     return (\r\n        <div className=\"Sidebar-List\">\r\n            <h2>Popular Subreddits</h2>\r\n            {\r\n                subReddits.map((subReddit) => {\r\n                    // formatting descrition html\r\n                    \r\n                    return (\r\n                        <Link to={`/r/${subReddit.display_name}`} >\r\n                            <div className=\"sub-reddit\">\r\n                                <h3>{subReddit.title}</h3>\r\n                                <h4>{`${getSubscribers(subReddit.subscribers)} subscribers`}</h4>\r\n                            </div>\r\n                        </Link>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n     )\r\n \r\n\r\n} \r\n\r\n\r\nexport default SidebarList;","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n\r\n// Async action creator\r\nexport const loadSubReddit = createAsyncThunk('subreddit/loadSubReddit', async (subRedditUrl, thunkAPI) => {\r\n    const response = await fetch(subRedditUrl);\r\n    const jsonData = await response.json();\r\n    \r\n    return {\r\n        name: jsonData.data.display_name_prefixed,\r\n        description:jsonData.data.public_description,\r\n        members:jsonData.data.subscribers,\r\n        online:jsonData.data.active_user_count,\r\n        icon: jsonData.data.icon_img,\r\n        banner: jsonData.data.banner_img,\r\n        color: jsonData.data.banner_background_color,\r\n        display_name: jsonData.data.display_name\r\n    };\r\n    \r\n})\r\n\r\n\r\n// create slice\r\nconst options = {\r\n    name: 'subreddit',\r\n    initialState: {\r\n        subReddit: {},\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {\r\n        deleteSubreddit: (state, action) => {\r\n            state.subReddit = {};\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadSubReddit.pending]: (state, action) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadSubReddit.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n            state.subReddit = action.payload;\r\n        },\r\n        [loadSubReddit.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError= true;\r\n        }\r\n    }\r\n};\r\n\r\nconst subredditSlice = createSlice(options);\r\n\r\n// Define selectors\r\nexport const selectSubReddit = (state) => state.subreddit.subReddit;\r\n\r\n// Export actions \r\nexport const { deleteSubreddit } = subredditSlice.actions;\r\nexport default subredditSlice.reducer;","import React, { useEffect } from 'react';\r\nimport PostList from '../postList/PostList';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { loadSubReddit, deleteSubreddit, selectSubReddit } from './subredditSlice';\r\nimport './subreddit.css';\r\nimport { getSubscribers } from '../../utils';\r\n\r\n\r\nfunction Subreddit (props) {\r\n    \r\n    const { match } = props;\r\n    const dispatch = useDispatch();\r\n    const { isLoading, hasError } = useSelector((state) => state.subreddit);\r\n    // Load subreddit data\r\n    const groupLink = `https://www.reddit.com/r/${match.params.subreddit}/about.json`; // currently test link for specific post\r\n    \r\n    const defaultIconUrl = \"https://i.redd.it/snoovatar/snoovatars/8658e16c-55fa-486f-b7c7-00726de2e742.png\";\r\n    const defaultBannerUrl = \"https://b.thumbs.redditmedia.com/VQ9Hvimc-54M7j6m2Ye1Bpix_iiaXh5ulYhUwkcyqqA.png\";\r\n\r\n    useEffect(() => {\r\n        dispatch(deleteSubreddit());\r\n        dispatch(loadSubReddit(groupLink));\r\n    }, [dispatch, groupLink]);\r\n\r\n    const { name, description, members, online, icon, banner} = useSelector(selectSubReddit);\r\n    const postsLink = `https://www.reddit.com/${name}/.json`; // dyanmically build link to API to download posts from subreddit\r\n\r\n        \r\n    if (isLoading){\r\n        return (\r\n            <div className=\"subreddit-page\">\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n    if (hasError){\r\n        return (\r\n           <div className=\"subreddit-page\">\r\n               <h1>Ooops!  Something went wrong.  Reload and try again.</h1>\r\n           </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"subreddit-page\">\r\n            <div className=\"container\">\r\n                <div className=\"banner\" style={{\r\n                    backgroundImage: `url(${banner? banner : defaultBannerUrl})`,\r\n                    backgroundPosition: `center`,\r\n                    backgroundRepeat: `no-repeat`,\r\n                    backgroundSize: `cover`,\r\n                }}></div>\r\n                <div className=\"subreddit-title\">\r\n                    <img src={icon ? icon : defaultIconUrl} alt=\"icon\"/>\r\n                    <h3>{name}</h3>\r\n                    <p>{description}</p>\r\n                </div>\r\n                <div className=\"subreddit-members\">\r\n                    <p className=\"members\">{`${getSubscribers(members)} Members`}</p>\r\n                    <p className=\"online\">{`${getSubscribers(online)} Online`}</p>\r\n                </div>\r\n            </div>\r\n            <PostList link={postsLink} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Subreddit","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getCommentData } from '../../utils';\r\n\r\n\r\n// Async action creator\r\nexport const loadComments = createAsyncThunk('commentList/loadComments', async (postUrl, thunkAPI) => {\r\n    const response = await fetch(postUrl);\r\n    const jsonData = await response.json();\r\n    \r\n    const commentsArray = jsonData[1].data.children; // array of comments\r\n    \r\n    return getCommentData(commentsArray);\r\n\r\n})\r\n\r\n\r\n// create slice\r\nconst options = {\r\n    name: 'commentList',\r\n    initialState: {\r\n        comments: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {\r\n        resetComments: (state, action) => {\r\n            state.comments = [];\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadComments.pending]: (state, action) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [loadComments.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n            state.comments = action.payload;\r\n        },\r\n        [loadComments.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError= true;\r\n        }\r\n    }\r\n};\r\n\r\nconst commentListSlice = createSlice(options);\r\n\r\n// Define selectors\r\nexport const selectComments = (state) => state.commentList.comments;\r\n\r\n// Export actions \r\nexport const { resetComments } = commentListSlice.actions;\r\nexport default commentListSlice.reducer;","import React, { useState } from 'react';\r\nimport { getCommentData, getElapsedTime } from '../../utils';\r\nimport './comment.css';\r\n\r\n\r\nfunction Comment (props) {\r\n\r\n    const { comments, isVisible } = props;\r\n    const [isVisibleState, setIsVisibleState] = useState(isVisible);  //use state array, converted into object, to keep track of showing/hiding replies\r\n\r\n    const handleClickEvent = ({target}) => {\r\n        const tmp = isVisibleState[target.value];\r\n        setIsVisibleState((prev) => ({...prev, [target.value]: !tmp}))        // used object in order to be able to use spread notation and only update relevant visible state element\r\n    }\r\n\r\n    return (\r\n        <div className=\"Comments-List\">\r\n            {\r\n                \r\n                comments.map((comment, index) => {\r\n                    // time-stamp conversion to elapsed time\r\n                    const timeElapsed = getElapsedTime(comment.date);\r\n                    \r\n                    // Get array of comments embedded in replies key to render nested replies for each comment\r\n                    const repliesArray = comment.replies ? getCommentData(comment.replies) : []; \r\n\r\n                    return (\r\n                        <div className=\"Comment\">\r\n                            <div className=\"comment-header\">\r\n                                <p>{`Comment by ${comment.author}`}</p>\r\n                                <p>{timeElapsed}</p>\r\n                            </div>\r\n                            <div className=\"comment-body\">\r\n                                <p>{comment.content}</p>\r\n                            </div>\r\n                            <div className=\"comment-footer\">\r\n                                {\r\n                                    comment.replies && ((comment.replies[0].kind !== \"more\") && (<button onClick={handleClickEvent} value={index}  // click event sends relevant index as value to the event handler, so we can only modify the relevant element state value;\r\n                                    >view replies</button>)) \r\n                                }\r\n                            </div>\r\n                            {   //Only render nested comments if relplies exist & user has toggled state.  Create isVisible object directly with new replies array.\r\n                                isVisibleState[index] && (comment.replies &&            \r\n                                (<div className=\"replies\">\r\n                                    <Comment comments={repliesArray} isVisible={Object.assign({}, comment.replies.map(() => false))}/> \r\n                                </div>))\r\n                            }\r\n                        </div>\r\n                    ) \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Comment;\r\n\r\n\r\n\r\n        ","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectComments, resetComments, loadComments } from './commentListSlice';\r\nimport Comment from '../comment/Comment';\r\n\r\nfunction CommentList (props) {\r\n    const dispatch = useDispatch();\r\n    const { isLoading, hasError } = useSelector((state) => state.commentList);\r\n    const { postLink } = props;\r\n\r\n     // Load post comments\r\n     \r\n     useEffect(() => {\r\n         dispatch(resetComments());\r\n         dispatch(loadComments(postLink));\r\n     }, [dispatch, postLink]);\r\n     \r\n     const comments = useSelector(selectComments);\r\n     const isVisibleArray = comments.map(() => false)  // testing passing isVisible via props\r\n     const isVisibleObj = Object.assign({}, isVisibleArray)  // converts array into object for easier manipulation in state variable\r\n\r\n     if (isLoading){\r\n         return (\r\n            <div className=\"Comments-List\">\r\n                <h1 className=\"loading\">Loading...</h1>\r\n            </div>\r\n         );\r\n     }\r\n \r\n     if (hasError){\r\n         return (\r\n            <div className=\"Comments-List\">\r\n                <h1 className=\"error\">Ooops!  Something went wrong.  Reload and try again.</h1>\r\n            </div>\r\n         );\r\n     }\r\n \r\n     return (\r\n         <Comment comments={comments} isVisible={isVisibleObj}/>  // need to pass isVisible props also recursively\r\n     )\r\n \r\n\r\n} \r\n\r\n\r\n\r\nexport default CommentList;","import React from 'react';\r\nimport Post from '../post/Post';\r\nimport CommentList from '../commentList/CommentList';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectPosts } from '../postList/postListSlice';\r\nimport './postwComments.css';\r\n\r\n\r\nfunction PostwComments (props) {\r\n\r\n    const { match } = props;  // gets the id from the URL passed via the <Link> component\r\n    const posts = useSelector(selectPosts);  // get current state\r\n    const renderedPost = posts.filter(post => post.id === match.params.id); // use the id passed via URL from <Link> to select relevant post\r\n    \r\n    const postLink = `https://www.reddit.com${renderedPost[0].link}.json`; // build relevant link based on post data\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"Post-with-comments\">\r\n            <div className=\"fixed-post\" id=\"exception\">\r\n                <Post posts={renderedPost} />  \r\n            </div>\r\n            <CommentList postLink={postLink} />  \r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default PostwComments;","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport  PostList  from './components/postList/PostList';\r\nimport Header from './components/header/Header';\r\nimport SidebarList from './components/sidebarList/SidebarList';\r\nimport Subreddit from './components/subreddit/Subreddit';\r\nimport PostwComments from './components/postwComments/PostwComments';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\nimport ScrollToTop from './components/scrollToTop/ScrollToTop';\r\n\r\n\r\nfunction App() {\r\n  \r\n  \r\n  const history = useHistory();\r\n  const [link, setLink] = useState(\"https://www.reddit.com/.json\");  // default link state is the homepage\r\n  const [endpoint, setEndpoint] = useState(\"\");\r\n  const homepageLink = \"https://www.reddit.com/.json\";\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const search = e.target[0].defaultValue;\r\n    setEndpoint(search);\r\n    setLink(`https://www.reddit.com/search/.json?q=${search}`);\r\n    history.push(`/search/${search}`)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      \r\n        <ScrollToTop />\r\n        <Header handleSubmit={handleSubmit}/>\r\n        <main>\r\n          <SidebarList />\r\n          <Switch>\r\n            <Route exact path=\"/\" render={(props) => (\r\n              <PostList {...props} link={homepageLink} />\r\n            )} />\r\n            <Route exact path={`/search/${endpoint}`} render={(props) => (\r\n              <PostList {...props} link={link} endpoint={endpoint} />\r\n            )} />\r\n            <Route exact path=\"/:id\" component={PostwComments} />\r\n            <Route exact path=\"/r/:subreddit\" component={Subreddit} />\r\n            <Route exact path=\"/results\" render={(props) => (\r\n              <PostList {...props} link={link} />\r\n            )} />\r\n          </Switch>\r\n        </main>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport postListReducer from '../components/postList/postListSlice';\r\nimport commentListReducer from '../components/commentList/commentListSlice';\r\nimport sidebarListReducer from '../components/sidebarList/sidebarListSlice';\r\nimport subredditReducer from '../components/subreddit/subredditSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    postList: postListReducer,\r\n    commentList: commentListReducer,\r\n    sidebarList: sidebarListReducer,\r\n    subreddit: subredditReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App />\n      </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}